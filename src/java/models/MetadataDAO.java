package models;
// Generated 4 oct. 2013 11:25:37 by Hibernate Tools 3.2.1.GA


import java.io.Serializable;
import utils.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Documents generated by hbm2java
 */
@Named(value = "metadataDAO")
@SessionScoped
public class MetadataDAO implements Serializable {
    Session session2 = null;

    public Session getSession() {
        return session2;
    }

    public void setSession(Session session) {
        this.session2 = session;
    }
    public MetadataDAO() {
        //this.session2 = HibernateUtil.getSessionFactory().getCurrentSession();
    }
    
    public List getMetadata() {
        List<Metadata> metadata = null;
        try {
            session2 = HibernateUtil.getSessionFactory().getCurrentSession();
            Transaction tx = session2.beginTransaction();
            Query q = session2.createQuery("from Metadata");
            metadata = (List<Metadata>) q.list();
            tx.commit();
            
            
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        return metadata;
    } 
        public List getOneMetadata(Integer id) {
        List<Metadata> metadata = null;
        try {
            session2 = HibernateUtil.getSessionFactory().getCurrentSession();
            Transaction tx = session2.beginTransaction();
            Query q = session2.createQuery("from Metadata where ID_Doc = "+ id+ "");
            metadata = (List<Metadata>) q.list();
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return metadata;
    } 
        
    public Integer ajouteMetadata(Metadata metadata) {
        Integer metadataId = null;
	
        try {
            session2 = HibernateUtil.getSessionFactory().getCurrentSession();
            Transaction tx = session2.beginTransaction();	    
            metadataId = (Integer) session2.save(metadata);	    
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return metadataId;
    } 
}


