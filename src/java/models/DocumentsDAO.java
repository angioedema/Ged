package models;
// Generated 4 oct. 2013 11:25:37 by Hibernate Tools 3.2.1.GA


import java.io.Serializable;
import java.util.HashMap;
import utils.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Documents generated by hbm2java
 */
@Named(value = "documentsDAO")
@SessionScoped
public class DocumentsDAO implements Serializable {
    Session session = null;
    public DocumentsDAO() {
        //this.session = HibernateUtil.getSessionFactory().getCurrentSession();
    }
    
    public List getDocuments() {
        List<Documents> documents = null;
        try {
            session = HibernateUtil.getSessionFactory().getCurrentSession();
            Transaction tx = session.beginTransaction();
            Query q = session.createQuery("from Documents");
            documents = (List<Documents>) q.list();
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return documents;
    } 
    
    public Integer ajouteDocument(Documents document) {
        Integer documentId = null;
	
        try {
            session = HibernateUtil.getSessionFactory().getCurrentSession();
            Transaction tx = session.beginTransaction();	    
            documentId = (Integer) session.save(document);	    
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return documentId;
    } 
    
       public String[] getMetadataFromDoc(Integer id) {
        List<Metadata> metadata = null;
        HashMap<String, String> hash =new HashMap<String,String>(); 
        String[] vals = new String[5];
        try {
            session = HibernateUtil.getSessionFactory().getCurrentSession();
            Transaction tx = session.beginTransaction();
            Query q = session.createQuery("from Metadata where ID_Doc = "+ id+ "");
            metadata = (List<Metadata>) q.list();
            tx.commit();
            
            for(int i=0; i<metadata.size(); i++) {
                vals[i] = metadata.get(i).getValeur();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return vals;
    } 
    
    
}


